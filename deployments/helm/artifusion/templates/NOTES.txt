Thank you for installing {{ .Chart.Name }}!

Your release is named {{ .Release.Name }}.

Artifusion is a multi-protocol artifact reverse proxy with GitHub authentication.

{{- if .Values.ingress.enabled }}

üåê Ingress URLs:
{{- range .Values.ingress.hosts }}
  {{- $host := .host }}
  {{- range .paths }}
  - https://{{ $host }}{{ .path }}
  {{- end }}
{{- end }}

{{- else }}

To access Artifusion, run these commands:

  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "artifusion.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=artifusion" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT

Visit http://127.0.0.1:8080 to access Artifusion.

{{- end }}

üìä Health Endpoints:
  - Liveness:  /health
  - Readiness: /ready
  - Metrics:   /metrics

üîß Configuration:
{{- if .Values.artifusion.config.github.required_org }}
  - GitHub Org: {{ .Values.artifusion.config.github.required_org }}
  - GitHub Packages: ENABLED (for Maven and NPM)
{{- else }}
  - GitHub Org: Not set (allowing any GitHub user)
  - GitHub Packages: DISABLED
{{- end }}

üì¶ Enabled Protocols:
{{- if .Values.artifusion.config.protocols.oci.enabled }}
  - OCI/Docker: /v2 (fixed per OCI spec)
{{- end }}
{{- if .Values.artifusion.config.protocols.maven.enabled }}
  - Maven:      {{ .Values.artifusion.config.protocols.maven.path_prefix }}
{{- end }}
{{- if .Values.artifusion.config.protocols.npm.enabled }}
  - NPM:        {{ .Values.artifusion.config.protocols.npm.path_prefix }}
{{- end }}

üîß Backend Services:
{{- if .Values.ociRegistry.enabled }}
  - OCI Registry:   ENABLED (pull-through cache for GHCR/Docker Hub)
{{- end }}
{{- if .Values.registry.enabled }}
  - Docker Registry: ENABLED (hosted registry for push operations)
{{- end }}
{{- if .Values.reposilite.enabled }}
  - Reposilite:     ENABLED (Maven repository manager)
{{- end }}
{{- if .Values.verdaccio.enabled }}
  - Verdaccio:      ENABLED (NPM registry cache)
{{- end }}
{{- if not (or .Values.ociRegistry.enabled .Values.registry.enabled .Values.reposilite.enabled .Values.verdaccio.enabled) }}
  ‚ö†Ô∏è  WARNING: No backends enabled! Artifusion requires at least one backend.
{{- end }}

üîê Authentication:
Clients must authenticate with GitHub Personal Access Token (PAT):
  - Docker:  docker login <host> -u <github-username> -p <github-pat>
  - Maven:   Configure <server> in settings.xml with GitHub credentials
  - NPM:     npm login --registry=<url>

{{- if not .Values.secrets.github.token }}

‚ö†Ô∏è  WARNING: GitHub upstream credentials not configured!
To enable GitHub Packages and GHCR pull-through cache, set:
  --set secrets.github.username=<your-github-username>
  --set secrets.github.token=<ghp_xxx>

{{- end }}

{{- if not .Values.secrets.dockerhub.token }}

üí° TIP: Configure Docker Hub credentials to avoid rate limits:
  --set secrets.dockerhub.username=<dockerhub-username>
  --set secrets.dockerhub.token=<dckr_pat_xxx>

{{- end }}

üß™ Test the deployment:
  helm test {{ .Release.Name }} --namespace {{ .Release.Namespace }}

üíæ Persistent Volume Claims (PVCs):
All backend storage PVCs are configured to be RETAINED on helm uninstall.
This preserves your cached artifacts and repository data.

List PVCs in this namespace:
  kubectl get pvc -n {{ .Release.Namespace }}

PVC naming convention:
{{- if .Values.ociRegistry.enabled }}
  - data-{{ include "artifusion.ociRegistry.serviceName" . }}-0
{{- end }}
{{- if .Values.registry.enabled }}
  - data-{{ include "artifusion.registry.serviceName" . }}-0
{{- end }}
{{- if .Values.reposilite.enabled }}
  - data-{{ include "artifusion.reposilite.serviceName" . }}-0
{{- end }}
{{- if .Values.verdaccio.enabled }}
  - data-{{ include "artifusion.verdaccio.serviceName" . }}-0
{{- end }}

When reinstalling with the same release name, existing PVCs will be
automatically reused, preserving your data.

To manually delete PVCs (WARNING: This deletes all cached data):
  kubectl delete pvc -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}

üìö Documentation:
  https://github.com/mainuli/artifusion

For more information, visit:
  - Chart Repository: oci://ghcr.io/mainuli/artifusion
  - Issues: https://github.com/mainuli/artifusion/issues
